// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SampleLMS.Data;

#nullable disable

namespace SampleLMS.Data.Migrations
{
    [DbContext(typeof(CourseDbContext))]
    [Migration("20231106090357_Adding Enrollment, Student and Instructor Models")]
    partial class AddingEnrollmentStudentandInstructorModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseCategory", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CourseCategory");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            CourseId = 1,
                            CategoryId = 2
                        },
                        new
                        {
                            CourseId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            CourseId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            CourseId = 2,
                            CategoryId = 3
                        });
                });

            modelBuilder.Entity("CourseInstructor", b =>
                {
                    b.Property<int>("CreatedCoursesCourseId")
                        .HasColumnType("int");

                    b.Property<int>("InstructorsInstructorId")
                        .HasColumnType("int");

                    b.HasKey("CreatedCoursesCourseId", "InstructorsInstructorId");

                    b.HasIndex("InstructorsInstructorId");

                    b.ToTable("CourseInstructor");
                });

            modelBuilder.Entity("CourseModule", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "ModuleId");

                    b.HasIndex("ModuleId");

                    b.ToTable("CourseModule");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            ModuleId = 1
                        },
                        new
                        {
                            CourseId = 1,
                            ModuleId = 2
                        },
                        new
                        {
                            CourseId = 2,
                            ModuleId = 1
                        },
                        new
                        {
                            CourseId = 2,
                            ModuleId = 2
                        },
                        new
                        {
                            CourseId = 2,
                            ModuleId = 3
                        });
                });

            modelBuilder.Entity("SampleLMS.Models.DomainModels.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 3,
                            Name = "Containerization"
                        },
                        new
                        {
                            CategoryId = 1,
                            Name = "Cloud"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "DevOps"
                        });
                });

            modelBuilder.Entity("SampleLMS.Models.DomainModels.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("Duration")
                        .IsRequired()
                        .HasColumnType("time");

                    b.Property<string>("FeaturedImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Heading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlHandle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            Author = "",
                            Content = "aaaaaaaaaaaabbbbbbbccccccccc",
                            Description = "Docker is a containerization tool, used by all kinds of engineers.",
                            Duration = new TimeSpan(0, 2, 30, 0, 0),
                            FeaturedImageUrl = "",
                            Heading = "Docker",
                            PublishedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Docker101",
                            UrlHandle = ""
                        },
                        new
                        {
                            CourseId = 2,
                            Author = "",
                            Content = "aaaaaaaaaaaabbbbbbbccccccccc",
                            Description = "Kubernetes is a container orchestration tool",
                            Duration = new TimeSpan(0, 5, 30, 0, 0),
                            FeaturedImageUrl = "",
                            Heading = "Kubernetes",
                            PublishedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Kubernetes101",
                            UrlHandle = ""
                        });
                });

            modelBuilder.Entity("SampleLMS.Models.DomainModels.Enrollments", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("CourseId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("SampleLMS.Models.DomainModels.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructorId"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstructorId");

                    b.ToTable("Instructor");
                });

            modelBuilder.Entity("SampleLMS.Models.DomainModels.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleId"));

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModuleContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModuleId");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            ModuleId = 1,
                            ContentType = "",
                            ModuleContent = "Sample module content...",
                            ModuleName = "Containers"
                        },
                        new
                        {
                            ModuleId = 3,
                            ContentType = "",
                            ModuleContent = "Sample module content...",
                            ModuleName = "Basic Docker Commands"
                        },
                        new
                        {
                            ModuleId = 2,
                            ContentType = "",
                            ModuleContent = "Sample module content...",
                            ModuleName = "K8s Introductions"
                        });
                });

            modelBuilder.Entity("CourseCategory", b =>
                {
                    b.HasOne("SampleLMS.Models.DomainModels.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SampleLMS.Models.DomainModels.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseInstructor", b =>
                {
                    b.HasOne("SampleLMS.Models.DomainModels.Course", null)
                        .WithMany()
                        .HasForeignKey("CreatedCoursesCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SampleLMS.Models.DomainModels.Instructor", null)
                        .WithMany()
                        .HasForeignKey("InstructorsInstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseModule", b =>
                {
                    b.HasOne("SampleLMS.Models.DomainModels.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SampleLMS.Models.DomainModels.Module", null)
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SampleLMS.Models.DomainModels.Enrollments", b =>
                {
                    b.HasOne("SampleLMS.Models.DomainModels.Course", null)
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("SampleLMS.Models.DomainModels.Course", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
